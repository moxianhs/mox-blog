


[{"content":" 流程概览 # 在本地唰唰写。 push 到你的 GitHub 仓库。 GitHub Actions 自动执行 deploy 动作。 部署成功访问 \u0026lt;username\u0026gt;.github.io 查看。 创建仓库 # 仓库名 # 在GitHub上创建一个名为\u0026lt;username\u0026gt;.github.io的仓库，比如我这个仓库就叫作：moxianhs.github.io，后面访问网页也是这个地址。\n你当然可以选择一个其他的名字，后面的流程也都能跑通，但唯一的问题就是：如果使用其他名字命名仓库，例如mox-blog，后面部署完成之后，访问地址就变成了moxianhs.github.io/mox-blog，如果不进行额外的配置，所有的 css、js、亦或是资源文件，都将找不到正确路径。\n主分支 # 注意主分支最好是main，主要的文件都放在这里，如果你选择用其他类似于master作为主分支，当然可以，注意在后面的 deploy 文件里改好对应字段。\n配置仓库 # Action 权限 # 进入你的仓库，在Settings -\u0026gt; Actions -\u0026gt; General -\u0026gt; Workflow permissions处，选择 Read and write permissions，否则，自动化动作无法将生成页面 push 进对应分支。\n部署 # 本地配置 # deploy.yaml # 在本地创建.github/workflows/deploy.yaml文件。\n内容大致如下：\nname: Deploy Hugo site to GitHub Pages on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v3 with: submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build site run: hugo build - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 注意on.push.branches的值，这里必须设置成你的主分支的名字。\n禁用 jekyll # GitHub Pages 可能会默认以 Jekyll 的方式解析文件，即使项目是 Hugo 构建的。这样就会出现构建失败的问题。故需要在项目根目录生成一个static/.nojekyll的空文件以禁用 jekyll 解析。\n本地仓库设置 # 设置远端仓库为之前配置好的空的GitHub仓库。 远端上游分支设置为主分支，如main。 在本地事先测试好博客能正常运行。 git add 所有除了 public的文件。 git push 到远端上游即可。 远端配置 # Pages # Settings -\u0026gt; Pages 里在 Branch 处，记得检查是否已经选择好gh-pages作为发布分支。\n以能看到\nYour GitHub Pages site is currently being built from the gh-pages branch.` 这句话为准。\n事后 # 如果能在Settings -\u0026gt; Pages里看到类似:\nYour site is live at https://moxianhs.github.io/\n那就证明部署成功了，可以直接点击路径访问，旁边也有一个Visit site的按键，一键直达。\n如果失败，可以在仓库的Actions页面，看到部署的全过程，可以查看每一个步骤的日志，检查具体的失败信息，对症下药。\n","date":"2024年11月26日","externalUrl":null,"permalink":"/posts/github-pages-configuration/","section":"Posts","summary":"","title":"Github Pages Configuration","type":"posts"},{"content":"","date":"2024年11月26日","externalUrl":null,"permalink":"/","section":"Mox's Blog","summary":"","title":"Mox's Blog","type":"page"},{"content":"","date":"2024年11月26日","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" Hugo 安装 # 在安装Hugo之前，请首先自行安装go和git到你的系统上。\nWindows # Chocolatey # choco install hugo-extended\nScoop # scoop install hugo-extended\nWinget # winget install hugo-extended\nmacOS # brew install hugo\nLinux # ArchLinux # sudo pacman -S hugo\nUbuntu/Debian # sudo apt install hugo\nFedora # sudo dnf install hugo\nOthers # 有prebuilt可供下载，此事于Hugo 官网亦有记载。\n验证安装成功 # hugo version 输出依据版本平台等有所不同，示例如下：\nhugo v0.136.5+extended darwin/arm64 BuildDate=2024-10-24T12:26:27Z VendorInfo=brew Blowfish 安装 # CLI # npx blowfish-tools\nor\nnpm i -g blowfish-tools\n而后：\nblowfish-tools\nNon-CLI # cd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 在项目根目录，删除由 Hugo 自动生成的 hugo.toml，从 themes/blowfish/config/_default 里复制 hugo.toml 到根目录。\n开始使用 Hugo # 开一个新博客：\nhugo new site \u0026lt;site-name\u0026gt;\n写一篇新文章：\nhugo new posts/\u0026lt;article-name\u0026gt;.md\n启动：\nhugo server\n启动（带草稿）：\nhugo server -D\n更多请见：Basic usage\n","date":"2024年11月26日","externalUrl":null,"permalink":"/posts/hugo-configuration/","section":"Posts","summary":"","title":"Hugo Configuration","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]